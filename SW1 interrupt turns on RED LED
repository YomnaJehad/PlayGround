#include "C:\Keil\EE319Kware\inc\tm4c123gh6pm.h"
#include "stdint.h"

/*
// System Control Legacy base address: 0x400F.E000 (Datasheet pg. 234)
#define SYSCTL_RCGC2_R          (*((volatile unsigned long *)0x400FE108))

// PortF(APB) base address: 0x40025000 (Datasheet pg. 657)
#define GPIO_PORTF_DATA_R       (*((volatile unsigned long *)0x400253FC))
#define GPIO_PORTF_DEN_R        (*((volatile unsigned long *)0x4002551C))
#define GPIO_PORTF_DIR_R        (*((volatile unsigned long *)0x40025400))
#define GPIO_PORTF_AMSEL_R      (*((volatile unsigned long *)0x40025528))
#define GPIO_PORTF_AFSEL_R      (*((volatile unsigned long *)0x40025420))
#define GPIO_PORTF_PCTL_R       (*((volatile unsigned long *)0x4002552C))

#define GPIO_PORTF_PUR_R        (*((volatile unsigned long *)0x40025510))

#define NVIC_EN0_R              (*((volatile unsigned long *)0xE000E100))  // IRQ 0 to 31 Set Enable Register
#define NVIC_PRI7_R             (*((volatile unsigned long *)0xE000E41C))  // IRQ 28 to 31 Priority Register

// GPIO Port Interrupt Registers
#define GPIO_PORTF_IS_R         (*((volatile unsigned long *)0x40025404))
#define GPIO_PORTF_IBE_R        (*((volatile unsigned long *)0x40025408))
#define GPIO_PORTF_IEV_R        (*((volatile unsigned long *)0x4002540C))
#define GPIO_PORTF_IM_R         (*((volatile unsigned long *)0x40025410))
#define GPIO_PORTF_RIS_R        (*((volatile unsigned long *)0x40025414))
#define GPIO_PORTF_ICR_R        (*((volatile unsigned long *)0x4002541C))

*/

// Prototypes
void initPortF(void);
void delay_(unsigned int param);

int main(void) {
  // put your setup code here, to run once:
  initPortF();                     // Initialize PortF



while(1) {
  // put your main code here, to run repeatedly:
  GPIO_PORTF_DATA_R ^= 0x04;   // Toggle BLUE LED on/off
  //delay(1000);

}
}
void initPortF(void) {
  unsigned long volatile delay__;

  // Port Clock Control
  SYSCTL_RCGC2_R          |=      0x00000020;
  delay__  /*Wait Ready*/    =      SYSCTL_RCGC2_R;

  //FOR THE LED PF1, PF2 , PF3
  // GPIO Digital Control
  GPIO_PORTF_DEN_R        |=      0x0E;
  GPIO_PORTF_DIR_R        |=      0x0E;

  // GPIO Alternate function control
  GPIO_PORTF_AMSEL_R      &=      ~0x0E;
  GPIO_PORTF_AFSEL_R      &=      ~0x0E;
  GPIO_PORTF_PCTL_R       &=      ~0x0000FFF0;

  //FOR THE SWITCH PF4
  GPIO_PORTF_DEN_R |= 0x10;
  GPIO_PORTF_DIR_R &= ~0x10;

  GPIO_PORTF_AFSEL_R &= ~0X10; //disable alt func on PF4
  GPIO_PORTF_AMSEL_R &= ~0x10; //disable analog
  GPIO_PORTF_PCTL_R &= ~0x000F000; //configure PF4 as GPIO
  GPIO_PORTF_PUR_R |= 0x10; // enable weak pull-up resistors

  GPIO_PORTF_IS_R &= ~0x10; //edge sensitive
  GPIO_PORTF_IBE_R &= ~0x10; // not both edges
  GPIO_PORTF_IEV_R &= ~0x10; //falling edge event

  GPIO_PORTF_ICR_R = 0x10; // clear flag4
  GPIO_PORTF_IM_R |= 0x10; //arm interrupt on PF4

  NVIC_PRI7_R = (NVIC_PRI7_R & 0xFF00FFFF) | 0x00A00000; //priorty 5
  NVIC_EN0_R = 0x40000000; //enable interrupt 30 in NVIC
	
	
	//FOR THE SWITCH PF0
  GPIO_PORTF_DEN_R |= 0x01;
  GPIO_PORTF_DIR_R &= ~0x01;

  GPIO_PORTF_AFSEL_R &= ~0X01; //disable alt func on PF4
  GPIO_PORTF_AMSEL_R &= ~0x01; //disable analog
  GPIO_PORTF_PCTL_R &= ~0x000F000; //configure PF4 as GPIO
  GPIO_PORTF_PUR_R |= 0x01; // enable weak pull-up resistors

  GPIO_PORTF_IS_R &= ~0x01; //edge sensitive
  GPIO_PORTF_IBE_R &= ~0x01; // not both edges
  GPIO_PORTF_IEV_R &= ~0x01; //falling edge event

  GPIO_PORTF_ICR_R = 0x01; // clear flag4
  GPIO_PORTF_IM_R |= 0x01; //arm interrupt on PF4

  NVIC_PRI7_R = (NVIC_PRI7_R & 0xFF00FFFF) | 0x00A00000; //priorty 5
  NVIC_EN0_R = 0x40000000; //enable interrupt 30 in NVIC


  __enable_irq(); //global enable interrupt
//EnableInterrupts();
}



// Busy-wait delay
void delay_(unsigned int param) {
  unsigned int i, j;

  for (j = 0; j < param; j++) {
    for (i = 0; i < 15; i++) {
      // do nothing
    }
  }
}

void GPIOPortF_Handler(void) {

  GPIO_PORTF_ICR_R = 0x10; //ack flag4
  GPIO_PORTF_DATA_R ^= 0x02;


}
